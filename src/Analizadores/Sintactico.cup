package Analizadores;
import java_cup.runtime.*;


//PARSER 
parser code
{://Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );                          //asas
    }

:}

terminal String reservada_conjunto, llave_abre, llave_cierra, dos_puntos, punto_y_coma, porcentaje, concat, virgulilla, coma, flecha, klenee;
terminal String or, plus, interrogacion, id, cadena, letra, numero, symbol, especial, menor;

nonterminal INICIO, INSTRUCCIONES, SENTENCIA, CONJUNTOS, REGEX, EVALUACION, RANGO, LISTA, CARACTER,CARACTER2, REG_EXP;
nonterminal ELEMENTO_REGEX, LISTA_SENTENCIAS_EVAL, LISTA_SENTENCIAS;


//precedence left concat, or;
//precedence left  klenee, interrogacion, plus;

start with INICIO;

INICIO ::= INSTRUCCIONES;

INSTRUCCIONES ::= llave_abre
                  LISTA_SENTENCIAS
                  porcentaje porcentaje
                  LISTA_SENTENCIAS_EVAL
                  llave_cierra;


// NO TERMINALES PARA REALIZAR UNA EVALUACION ------------------------------------------------------------------------------

EVALUACION ::= id dos_puntos cadena punto_y_coma ;

LISTA_SENTENCIAS::= SENTENCIA LISTA_SENTENCIAS| SENTENCIA;
LISTA_SENTENCIAS_EVAL ::= EVALUACION LISTA_SENTENCIAS_EVAL|EVALUACION;

SENTENCIA ::= CONJUNTOS|REGEX punto_y_coma;


// NO TERMINALES DE CONJUNTOS----------------------------------------------------------------------------------------------------
CONJUNTOS ::= reservada_conjunto dos_puntos id flecha RANGO;



RANGO ::= CARACTER:c1 CARACTER2
{:System.out.println("derive en " + c1);:}
;


CARACTER::=letra:l{:RESULT=l;:}|numero|symbol|llave_abre|llave_cierra|dos_puntos|punto_y_coma|porcentaje|concat|coma|klenee|menor;


CARACTER2::= virgulilla CARACTER punto_y_coma|LISTA;


LISTA ::= coma CARACTER LISTA|punto_y_coma;


// NO TERMINALES DE REGEX----------------------------------------------------------------------------------------------------

REGEX ::= id flecha REG_EXP;

REG_EXP::= concat REG_EXP REG_EXP
         | or REG_EXP REG_EXP
         | klenee REG_EXP
         | plus REG_EXP
         | interrogacion REG_EXP
         | ELEMENTO_REGEX
         ;



ELEMENTO_REGEX ::= llave_abre id llave_cierra
                   | cadena
                   | especial;

