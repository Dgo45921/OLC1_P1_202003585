
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Extra.*;
import Ventanas.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\007\006\000\002\017\004\000\002\017\003" +
    "\000\002\016\004\000\002\016\003\000\002\004\003\000" +
    "\002\004\004\000\002\005\007\000\002\010\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\005\000\002\013\003\000\002" +
    "\011\005\000\002\011\003\000\002\006\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\004\005\005\001\002\000\004\002\000\001" +
    "\002\000\006\004\010\022\015\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\007\056\001" +
    "\002\000\004\011\044\001\002\000\010\004\010\011\ufffc" +
    "\022\015\001\002\000\004\010\042\001\002\000\010\004" +
    "\ufff9\011\ufff9\022\ufff9\001\002\000\004\015\016\001\002" +
    "\000\022\005\022\012\027\016\021\017\020\020\025\021" +
    "\026\023\017\027\024\001\002\000\024\005\uffde\010\uffde" +
    "\012\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\027" +
    "\uffde\001\002\000\022\005\022\012\027\016\021\017\020" +
    "\020\025\021\026\023\017\027\024\001\002\000\022\005" +
    "\022\012\027\016\021\017\020\020\025\021\026\023\017" +
    "\027\024\001\002\000\004\022\035\001\002\000\004\010" +
    "\uffe6\001\002\000\024\005\uffdd\010\uffdd\012\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\023\uffdd\027\uffdd\001\002\000" +
    "\022\005\022\012\027\016\021\017\020\020\025\021\026" +
    "\023\017\027\024\001\002\000\022\005\022\012\027\016" +
    "\021\017\020\020\025\021\026\023\017\027\024\001\002" +
    "\000\022\005\022\012\027\016\021\017\020\020\025\021" +
    "\026\023\017\027\024\001\002\000\024\005\uffe0\010\uffe0" +
    "\012\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\027" +
    "\uffe0\001\002\000\022\005\022\012\027\016\021\017\020" +
    "\020\025\021\026\023\017\027\024\001\002\000\024\005" +
    "\uffe5\010\uffe5\012\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\023\uffe5\027\uffe5\001\002\000\024\005\uffe1\010\uffe1\012" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\027\uffe1" +
    "\001\002\000\024\005\uffe2\010\uffe2\012\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\023\uffe2\027\uffe2\001\002\000\004" +
    "\006\036\001\002\000\024\005\uffdf\010\uffdf\012\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\027\uffdf\001\002" +
    "\000\024\005\uffe3\010\uffe3\012\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\023\uffe3\027\uffe3\001\002\000\022\005\022" +
    "\012\027\016\021\017\020\020\025\021\026\023\017\027" +
    "\024\001\002\000\024\005\uffe4\010\uffe4\012\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\023\uffe4\027\uffe4\001\002\000" +
    "\010\004\ufff8\011\ufff8\022\ufff8\001\002\000\004\011\ufffd" +
    "\001\002\000\004\011\045\001\002\000\004\022\050\001" +
    "\002\000\004\006\055\001\002\000\006\006\ufffa\022\050" +
    "\001\002\000\004\007\051\001\002\000\004\023\052\001" +
    "\002\000\004\010\053\001\002\000\006\006\ufffe\022\ufffe" +
    "\001\002\000\004\006\ufffb\001\002\000\004\002\uffff\001" +
    "\002\000\004\022\057\001\002\000\004\015\060\001\002" +
    "\000\030\005\066\006\065\007\061\010\072\011\064\012" +
    "\074\014\062\016\067\024\070\025\071\026\063\001\002" +
    "\000\010\010\ufff0\013\ufff0\014\ufff0\001\002\000\010\010" +
    "\uffec\013\uffec\014\uffec\001\002\000\010\010\ufff3\013\ufff3" +
    "\014\ufff3\001\002\000\010\010\uffee\013\uffee\014\uffee\001" +
    "\002\000\010\010\ufff1\013\ufff1\014\ufff1\001\002\000\010" +
    "\010\ufff2\013\ufff2\014\ufff2\001\002\000\010\010\uffeb\013" +
    "\uffeb\014\uffeb\001\002\000\010\010\ufff5\013\ufff5\014\ufff5" +
    "\001\002\000\010\010\ufff4\013\ufff4\014\ufff4\001\002\000" +
    "\010\010\uffef\013\uffef\014\uffef\001\002\000\010\004\ufff7" +
    "\011\ufff7\022\ufff7\001\002\000\010\010\uffed\013\uffed\014" +
    "\uffed\001\002\000\010\010\100\013\076\014\077\001\002" +
    "\000\030\005\066\006\065\007\061\010\072\011\064\012" +
    "\074\014\062\016\067\024\070\025\071\026\063\001\002" +
    "\000\030\005\066\006\065\007\061\010\072\011\064\012" +
    "\074\014\062\016\067\024\070\025\071\026\063\001\002" +
    "\000\010\004\uffe7\011\uffe7\022\uffe7\001\002\000\010\004" +
    "\uffe9\011\uffe9\022\uffe9\001\002\000\010\004\ufff6\011\ufff6" +
    "\022\ufff6\001\002\000\006\010\100\014\077\001\002\000" +
    "\010\004\uffe8\011\uffe8\022\uffe8\001\002\000\004\010\106" +
    "\001\002\000\010\004\uffea\011\uffea\022\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\012\004\011\005\013\006\012\017\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\011\005\013\006\012\017\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\022\015\027\001\001\000\002\001\001" +
    "\000\006\014\037\015\027\001\001\000\006\014\036\015" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\033\015\027\001\001\000\006\014" +
    "\032\015\027\001\001\000\006\014\030\015\027\001\001" +
    "\000\002\001\001\000\006\014\031\015\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\040\015\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\046\016" +
    "\045\001\001\000\002\001\001\000\006\007\046\016\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\072\012" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\100\013\101\001\001\000\004\012\104\001\001" +
    "\000\004\012\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        Errores error = new Errores(s.right+1, (s.left+1), ""+s.value, "Sintáctico R" );
        Main.lista_errores.add(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        Errores error = new Errores(s.right+1, (s.left+1), ""+s.value, "Sintáctico NR" );
        Main.lista_errores.add(error);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


    String regex_guardado = "";
    String cadena = "";
    Funcion mensajero = new Funcion();


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= llave_abre LISTA_SENTENCIAS porcentaje porcentaje LISTA_SENTENCIAS_EVAL llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EVALUACION ::= id dos_puntos cadena punto_y_coma 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int chainleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int chainright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String chain = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		

                mensajero.guarda_evaluaciones(ID, chain.toString());

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EVALUACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_SENTENCIAS ::= SENTENCIA LISTA_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_SENTENCIAS_EVAL ::= EVALUACION LISTA_SENTENCIAS_EVAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_EVAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAS_EVAL ::= EVALUACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_EVAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= CONJUNTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= REGEX punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONJUNTOS ::= reservada_conjunto dos_puntos id flecha RANGO 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rangoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rangoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object rango = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                mensajero.guarda_rango(ID, rango.toString());
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RANGO ::= CARACTER CARACTER2 
            {
              Object RESULT =null;
		int res1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int res1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object res1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int res2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int res2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object res2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = res1.toString() + res2.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RANGO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CARACTER ::= letra 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=l;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CARACTER ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CARACTER ::= symbol 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CARACTER ::= llave_abre 
            {
              Object RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String la = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=la;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CARACTER ::= llave_cierra 
            {
              Object RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lc;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CARACTER ::= dos_puntos 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=dp;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CARACTER ::= punto_y_coma 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=pc;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CARACTER ::= porcentaje 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String per = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=per;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CARACTER ::= concat 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String con = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=con;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CARACTER ::= coma 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=com;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CARACTER ::= klenee 
            {
              Object RESULT =null;
		int kleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int kleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String kle = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=kle;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CARACTER2 ::= virgulilla CARACTER punto_y_coma 
            {
              Object RESULT =null;
		int car12left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int car12right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object car12 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            // retorna el rango en el caso de que haya una virgulilla
            RESULT="~"+car12.toString();
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CARACTER2 ::= LISTA 
            {
              Object RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lis = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = lis;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTER2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA ::= coma CARACTER LISTA 
            {
              Object RESULT =null;
		int car_listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int car_listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object car_lista = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int result_listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int result_listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object result_lista = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            // retorna los valores de la lista seguidos de coma
            if (result_lista != null) {
            RESULT= "," + car_lista.toString() + result_lista.toString();
            }
            else{
            RESULT = "," + car_lista.toString();
            }

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA ::= punto_y_coma 
            {
              Object RESULT =null;
		
                RESULT = ""; // retorna una cadena vacia ya que el rango solo es de 1 elemento
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // REGEX ::= id flecha REG_EXP 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int regleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
mensajero.guarda_regex(ID, reg.toString());


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REGEX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REG_EXP ::= concat REG_EXP REG_EXP 
            {
              Object RESULT =null;
		int reg1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object reg1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int reg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int reg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object reg2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="."+reg1.toString()+reg2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REG_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // REG_EXP ::= or REG_EXP REG_EXP 
            {
              Object RESULT =null;
		int reg3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int reg3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object reg3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int reg4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int reg4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object reg4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="|"+reg3.toString()+reg4.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REG_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REG_EXP ::= klenee REG_EXP 
            {
              Object RESULT =null;
		int reg5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int reg5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object reg5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="*"+reg5.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REG_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // REG_EXP ::= plus REG_EXP 
            {
              Object RESULT =null;
		int reg6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int reg6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object reg6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="+"+reg6.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REG_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // REG_EXP ::= interrogacion REG_EXP 
            {
              Object RESULT =null;
		int reg7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int reg7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object reg7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="?"+reg7.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REG_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // REG_EXP ::= ELEMENTO_REGEX 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REG_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELEMENTO_REGEX ::= llave_abre id llave_cierra 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT ="{"+ ID + "}";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_REGEX",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO_REGEX ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_REGEX",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTO_REGEX ::= especial 
            {
              Object RESULT =null;
		int espleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int espright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String esp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = esp;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO_REGEX",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
